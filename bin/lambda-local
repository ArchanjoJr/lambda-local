#!/usr/bin/env node

/*
 * Local executor for Amazon Lambda function
 */
(function(){
	var utils = require('../lib/utils.js');

	// process opts
	var program = require('commander');
	program
		.option('-l, --lambdapath [lambda file name]', 'Specify Lambda function file name.')
		.option('-e, --eventpath [event data file name]', 'Specify event data file name.')
		.option('-h, --handler [lambda-function handler name (optional)]', 'Lambda function handler name. Default is "handler".')
		.option('-t, --timeout [timeout seconds (optional)]', 'Seconds until lambda function timeout. Default is 3 seconds.')
		.option('-c, --callbackforce (optional)', 'Force the function to stop after having called context.done/succeed/fail.')
		.option('-p, --profile [aws file path (optional)]', 'Read the AWS profile to get the credidentials')
		.parse(process.argv);

	var eventPath = program.eventpath;
	var lambdaPath = program.lambdapath;
	var lambdaHandler = program.handler;
	var profilePath = program.profile;
	var callbackWaitsForEmptyEventLoop = program.callbackforce;
	if (!lambdaPath || !eventPath) {
		program.help();
	}

	// default handler name
	if (!lambdaHandler) {
		lambdaHandler = "handler";
	}
	
	//default callbackWaitsForEmptyEventLoop
	if(!callbackWaitsForEmptyEventLoop){
		callbackWaitsForEmptyEventLoop = true;
	} else {
		callbackWaitsForEmptyEventLoop = false;
	}

	//load profile
	if(profilePath){
		utils.loadAWSFile(utils.getAbsolutePath(profilePath));
	}
	
	// load lambda function
	var lambdaAbsolutePath = utils.getAbsolutePath(lambdaPath);
	var lambdaFunc = require(lambdaAbsolutePath);

	// load event & context
	var eventAbsolutePath = utils.getAbsolutePath(eventPath);
	var _event = require(eventAbsolutePath);
	var _context = require('../lib/context.js');

	var timeoutMs;
	if (program.timeout) {
		timeoutMs = program.timeout * 1000;
	} else {
		timeoutMs = 3000;
	}
	setTimeout(function(){
		console.log("Task timed out after "+(timeoutMs/1000).toFixed(2)+" seconds");
		process.exit();
	}, timeoutMs); 

	_context._initialize({
		functionName: lambdaHandler,
		awsRequestId: _context.createInvokeId,
		timeoutMs: timeoutMs,
		callbackWaitsForEmptyEventLoop: callbackWaitsForEmptyEventLoop
	});
	// export the LAMBDA_TASK_ROOT enviroment variable
	process.env['LAMBDA_TASK_ROOT'] = process.cwd();
	
	//setting common other vars environments 
	process.env['NODE_PATH'] = Utils.getAbsolutePath("node_modules");
	process.env['LAMBDA_CONSOLE_SOCKET'] = 14;
	process.env['LAMBDA_CONTROL_SOCKET'] = 11;
	process.env['AWS_SESSION_TOKEN'] = _context.awsRequestId; /*Just a random value...*/
	
	// execute lambda function
	console.log("Logs");
	console.log("------");
	console.log("START RequestId: " + _context.awsRequestId);

	lambdaFunc[lambdaHandler](_event, _context);
	
	if(callbackWaitsForEmptyEventLoop){		
		//Finish the process
		process.exit();
	}
})();
